## 项目结构
+ config-server 配置中心，目前使用本地配置中心，配置文件路径在application.properties文件中指定
+ framework 基础类库
+ javashop-core 核心类库
+ base-api 公共接口
+ consumer MQ消息消费
+ buyer-api 买家后台
+ seller-api 卖家后台
+ manager-api 管理后台
+ sba-server spring-boot-admin管理端，可以不启动，用于管理和监控SpringBoot应用程序

## 环境搭建

#### Nginx 安装
+ Windows（zip包）  
下载 nginx-1.19.0.zip，解压后 找到  nginx.exe启动
+ CentOS (rpm安装)
```
  ### 安装nginx, 安装后的配置文件位于 /etc/nginx/nginx.conf
  yum install nginx

  ### 设置开机启动
  systemctl enbale nginx.service
  
  ### 启动nginx
  systemctl start nginx.service

  ### 重启nginx
  systemctl restart nginx.service

  ### 关闭nginx
  systemctl stop nginx.service

  ### 查看nginx状态
  systemctl status nginx.status
```
#### jdk8 安装
jdk-8u271-linux-x64.tar.gz
```
tar -zxvf jdk-8u271-linux-x64.tar.gz
mv jdk1.8.0_271/ /opt/jdk1.8.0_271/

vi /etc/profile , 加入以下内容：
export JAVA_HOME=/opt/jdk1.8.0_271
export PATH=$PATH:$JAVA_HOME/bin
:wq 保存后退出
source /etc/profile
```
#### elasticsearch 5.6.16
下载地址： https://elasticsearch.cn/download/
+ Windows（zip包）  
  直接解压
+ CentOS （rpm）  
```
### 安装es，安装后的目录位于 /usr/share/elasticsearch, 配置文件位于 /etc/elasticsearch/elasticsearch.yml
rpm -ivh elasticsearch-5.6.16.rpm   

vi /etc/sysconfig/elasticsearch , 配置JAVA_HOME:
JAVA_HOME=/opt/jdk1.8.0_271
:wq 保存后退出

vi /etc/elasticsearch/elasticsearch.yml , 添加如下配置:
    cluser.name: esCluster
    network.host: 0.0.0.0
    http.port: 9200
:wq 保存后退出

### 添加 elasticsearch服务
sudo systemctl daemon-reload
sudo systemctl enable elasticsearch.service

### 启动 elasticsearch
sudo systemctl start elasticsearch.service

### 关闭 elasticsearch
sudo systemctl stop elasticsearch.service

### 重启 elasticsearch
sudo systemctl restart elasticsearch.service
```

#### ik中文分词器 5.6.16 （zip包） 
  下载地址： https://github.com/medcl/elasticsearch-analysis-ik/releases?after=v6.3.1
+ Windows   
 解压后修改 elasticsearch 为 ik， 放到 es安装目录下的 plugins 目录下
+ CentOS
```
unzip elasticsearch-analysis-ik-5.6.16.zip
mv elasticsearch/ ik/
mv ik/ /usr/share/elasticsearch/plugins/
``` 
   
#### erlang 23.2 (rabbitmq需要先安装erlang)
下载地址： https://www.erlang.org/downloads/23.2
+ Windows版  
  选择OTP 23.2 Windows 64-bit Binary File 下载，然后直接安装
+ CentOS版（源码安装）  
  ```
  yum install gcc gcc-c++ ncurses-devel openssl openssl-devel unixODBC unixODBC-devel mesa-libGL-devel gtk2 gtk2-devel
  选择OTP 23.2 Source File 下载源码  
  tar -zxvf opt_src_23.2.tar.gz
  cd otp_src_23.2
  ./configure --prefix=/opt/erlang --without-javac
  make
  make install  
  ln -s /opt/erlang/bin/erl /usr/bin/
  ```
#### Rabbitmq 3.8.9
下载地址： https://github.com/rabbitmq/rabbitmq-server/releases/
+ Windows版  
  下载 rabbitmq-server-3.8.9.exe,直接安装
+ CentOS版（源码安装）
  下载 rabbitmq-server-generic-unix-3.8.9.tar.xz
  ```
  xz -d rabbitmq-server-generic-unix-3.8.9.tar.xz
  tar -xvf rabbitmq-server-generic-unix-3.8.9.tar
  mv rabbitmq_server-3.8.9/ /opt/
  
  vi /etc/profile, 添加如下内容:
  export PATH=$PATH:/opt/rabbitmq_server-3.8.9/sbin
  :wq 保存
  source /etc/profile
  
  ### 启用web管理台 默认端口 15672
  rabbitmq-plugins enable rabbitmq_management
  
  ### 后台启动 rabbitmq
  rabbitmq-server -detached
  
  ### 添加用户并授权
  ### 用户admin 密码 123456
  rabbitmqctl add_user admin rabbitmq@admin
  ### 设置用户为administrator角色
  rabbitmqctl set_user_tags admin administrator
  ### 查看用户列表
  rabbitmqctl list_users
  ### 设置 admin 用户的权限，指定允许访问的vhost以及write/read
  rabbitmqctl set_permissions -p "/" admin "." "." ".*"
  ### 查看vhost（/）允许哪些用户访问
  rabbitmqctl list_permissions -p /
  
  ### 停止rabbitmq
  rabbitmqctl stop
  ```
+ 添加 rabbitmq_delayed_message_exchange 插件  
1 下载插件 https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/tag/3.8.9  
2 将下载的包放到 /RABBIT_HOME/plugins下  
3 启用插件  
  rabbitmq-plugins enable rabbitmq_delayed_message_exchange
4 重启rabbitmq   

#### Mysql 5.7
+ Windows安装  
略。
+ CentOS安装  
略。

#### xxl-job 2.0.1（源码需要编译）
下载地址： https://gitee.com/xuxueli0323/xxl-job/releases 或 https://github.com/xuxueli/xxl-job/releases
+ 将解压后的项目导入到idea/eclipse, 切换到 tag 下的：v2.0.1。
+ 创建 xxl-job 数据库，执行位于 deploy/src/main/resources/scheme/standard/xxl_job.sql 脚本创建相应的表。  
  注意： xxl-job 项目中的xxl_job 脚本中的表结构中未指定ROW_FORMAT参数，可能会报错，需要添加 ROW_FORMAT = DYNAMIC。  
  此处使用了 deploy 项目中的脚本！！ 
+ 修改 application.properties 文件
```
  ### web
  server.port=7080
  server.context-path=/xxl-job-admin

  ### 修改数据库配置
  spring.datasource.url=jdbc:mysql://127.0.0.1:3306/xxl-job?Unicode=true&characterEncoding=UTF-8
  spring.datasource.username=root
  spring.datasource.password=root

  ### 修改邮件配置（邮箱请根据实际情况进行填写!）
  ### xxl-job email
  xxl.job.mail.host=smtp.163.com
  xxl.job.mail.port=25
  xxl.job.mail.ssl=false
  xxl.job.mail.username=vnbadmin@163.com
  xxl.job.mail.password=vnb@admin
  xxl.job.mail.sendNick=《任务调度平台XXL-JOB》

  ### xxl-job 登录用户及密码
  xxl.job.login.username=admin
  xxl.job.login.password=123456
  
  ### xxl-job 访问token
  xxl.job.accessToken=7baa077f4a964a76810d2e9d8fd5b2f0
  
  ### xxl-job, i18n (default empty as chinese, "en" as english)
  xxl.job.i18n=
```
+ 构建 xxl-job-admin
```
  maven clean
  maven install
```
+ 启动 xxl-job-admin，默认端口 7080  
请根据jar包所在实际路径修改！！  
Windows：  
```
  java -jar d:/xxl-job-admin-2.0.1.jar
```  
CentOS：
```
  nohup java -jar /opt/xxl-job-admin-2.0.1/xxl-job-admin-2.0.1.jar & 
```
+ 如何修改 xxl-job-admin jar包里的相关配置：  
  xxl-job-admin-2.0.1.jar\BOOT-INF\classes\application.properties 文件，然后重新启动 xxl-job-admin
  
#### nodejs 14.15.4
下载地址： https://nodejs.org/en/download/
+ Windows版  
  选择 Windows Installer下载，然后直接安装
+ CentOS版
  选择 Linux Binaries（X64）下载
  ```
  xz -d node-v14.15.4-linux-x64.tar.xz
  tar -xvf node-v14.15.4-linux-x64.tar
  mv /usr/local/software/node-v14.15.4-linux-x64 /opt/nodejs
  ln -s /opt/nodejs/bin/node /usr/local/bin/node
  ln -s /opt/nodejs/bin/npm /usr/local/bin/npm
  
  npm config set registry https://registry.npm.taobao.org
  npm install -g pm2
  ln -s /opt/nodejs/bin/pm2 /usr/local/bin/pm2
  ```  
#### 部署买家PC端（nuxt）
```
  # 进入买家PC端项目目录
  cd /opt/server/ui/buyer/pc

  # 安装项目依赖
  npm install
  # 如果npm 安装node-sass遇到错误，执行下面的命令
  npm install node-sass --unsafe-perm --save-dev

  # build项目
  npm run build

  # 使用pm2后台启动
  pm2 start npm --name "buyer-pc" -- run start
```
#### 部署买家WAP端（nuxt）
```
  # 进入买家PC端项目目录
  cd /opt/server/ui/buyer/wap

  # 安装项目依赖
  npm install

  # build项目
  npm run build

  # 使用pm2后台启动
  pm2 start npm --name "buyer-wap" -- run start
```
#### 部署管理端（Nginx反向代理）
```
  # 安装项目依赖
  npm install

  # build项目
  npm run build:prod

  # 将dist目录下的文件放到服务器上的指定目录，如： /opt/server/ui/manager-admin
```
#### 部署商家中心（Nginx反向代理）
```
  # 安装项目依赖
  npm install

  # build项目
  npm run build:prod

  # 将dist目录下的文件放到服务器上的指定目录，如： /opt/server/ui/manager-seller
```